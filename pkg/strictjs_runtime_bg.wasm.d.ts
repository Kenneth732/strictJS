/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_strictstring_free: (a: number, b: number) => void;
export const strictstring_new: (a: number, b: number, c: number) => number;
export const strictstring_newWithEncoding: (a: number, b: number, c: number, d: number) => number;
export const strictstring_get: (a: number) => [number, number];
export const strictstring_getBytes: (a: number) => [number, number];
export const strictstring_getBytes16: (a: number) => [number, number];
export const strictstring_set: (a: number, b: number, c: number) => [number, number];
export const strictstring_push: (a: number, b: number, c: number) => [number, number];
export const strictstring_pushChar: (a: number, b: number) => [number, number];
export const strictstring_popChar: (a: number) => number;
export const strictstring_len_chars: (a: number) => number;
export const strictstring_lenBytes: (a: number) => number;
export const strictstring_lenBytes16: (a: number) => number;
export const strictstring_max_chars: (a: number) => number;
export const strictstring_getEncoding: (a: number) => number;
export const strictstring_setEncoding: (a: number, b: number) => [number, number];
export const strictstring_substring: (a: number, b: number, c: number) => [number, number, number];
export const strictstring_charAt: (a: number, b: number) => [number, number];
export const strictstring_indexOf: (a: number, b: number, c: number) => number;
export const strictstring_lastIndexOf: (a: number, b: number, c: number) => number;
export const strictstring_startsWith: (a: number, b: number, c: number) => number;
export const strictstring_endsWith: (a: number, b: number, c: number) => number;
export const strictstring_contains: (a: number, b: number, c: number) => number;
export const strictstring_replace: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const strictstring_toLowerCase: (a: number) => void;
export const strictstring_toUpperCase: (a: number) => void;
export const strictstring_trim: (a: number) => void;
export const strictstring_trimStart: (a: number) => void;
export const strictstring_trimEnd: (a: number) => void;
export const strictstring_padStart: (a: number, b: number, c: number, d: number) => [number, number];
export const strictstring_padEnd: (a: number, b: number, c: number, d: number) => [number, number];
export const strictstring_split: (a: number, b: number, c: number) => any;
export const strictstring_map: (a: number, b: any) => [number, number, number];
export const strictstring_filter: (a: number, b: any) => [number, number, number];
export const __wbg_strictfunction_free: (a: number, b: number) => void;
export const __wbg_strictfunctionresult_free: (a: number, b: number) => void;
export const strictfunctionresult_value: (a: number) => any;
export const strictfunctionresult_result_type: (a: number) => [number, number];
export const strictfunctionresult_toNumber: (a: number) => [number, number];
export const strictfunctionresult_toBoolean: (a: number) => number;
export const strictfunctionresult_toString: (a: number) => [number, number];
export const strictfunction_new: (a: any, b: any, c: number) => [number, number, number];
export const strictfunction_callComplex: (a: number, b: any, c: any) => [number, number, number];
export const strictfunction_validateArguments: (a: number, b: any) => [number, number];
export const strictfunction_call: (a: number, b: any) => [number, number, number];
export const strictfunction_getArgTypes: (a: number) => any;
export const strictfunction_getReturnType: (a: number) => any;
export const __wbg_reactivesystem_free: (a: number, b: number) => void;
export const __wbg_reactivecell_free: (a: number, b: number) => void;
export const __wbg_computed_free: (a: number, b: number) => void;
export const reactivesystem_new: () => number;
export const reactivesystem_defineCell: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const reactivesystem_setCell: (a: number, b: number, c: number, d: number) => [number, number];
export const reactivesystem_getCell: (a: number, b: number, c: number) => [number, number, number];
export const reactivesystem_defineComputed: (a: number, b: number, c: number, d: number, e: any) => [number, number];
export const reactivesystem_getComputed: (a: number, b: number, c: number) => [number, number, number];
export const reactivesystem_getSystemState: (a: number) => any;
export const __wbg_strictasync_free: (a: number, b: number) => void;
export const strictasync_new: (a: number) => number;
export const strictasync_addTask: (a: number, b: any, c: number, d: number, e: number) => void;
export const strictasync_runTasks: (a: number) => any;
export const strictasync_getQueueSize: (a: number) => number;
export const strictasync_getRunningTasks: (a: number) => number;
export const strictasync_clearQueue: (a: number) => void;
export const __wbg_strictpromise_free: (a: number, b: number) => void;
export const strictpromise_new: (a: any, b: number) => [number, number, number];
export const strictpromise_awaitValue: (a: number) => any;
export const strictpromise_then: (a: number, b: any) => [number, number, number];
export const strictpromise_catch: (a: number, b: any) => [number, number, number];
export const __wbg_stricttimeout_free: (a: number, b: number) => void;
export const stricttimeout_new: (a: number, b: any, c: number) => number;
export const stricttimeout_start: (a: number) => any;
export const strict_fetch: (a: number, b: number, c: number) => any;
export const __wbg_threadtask_free: (a: number, b: number) => void;
export const threadtask_new: (a: any, b: any, c: number, d: number) => [number, number, number];
export const threadtask_id: (a: number) => [number, number];
export const threadtask_state: (a: number) => number;
export const threadtask_priority: (a: number) => number;
export const threadtask_execute: (a: number) => any;
export const threadtask_to_promise: (a: number) => any;
export const __wbg_strictnumber_free: (a: number, b: number) => void;
export const strictnumber_new: (a: number, b: number) => number;
export const strictnumber_heap: (a: number) => number;
export const strictnumber_get: (a: number) => number;
export const strictnumber_set: (a: number, b: number) => void;
export const strictnumber_add: (a: number, b: number) => void;
export const strictnumber_sub: (a: number, b: number) => void;
export const strictnumber_mul: (a: number, b: number) => void;
export const strictnumber_div: (a: number, b: number) => void;
export const strictnumber_valueOf: (a: number) => number;
export const __wbg_schema_free: (a: number, b: number) => void;
export const schema_new: () => number;
export const schema_addField: (a: number, b: number, c: number, d: number, e: number) => void;
export const schema_addNestedField: (a: number, b: number, c: number, d: number) => void;
export const schema_getFieldType: (a: number, b: number, c: number) => [number, number];
export const schema_getNestedSchema: (a: number, b: number, c: number) => number;
export const schema_hasField: (a: number, b: number, c: number) => number;
export const schema_isNestedField: (a: number, b: number, c: number) => number;
export const schema_fieldNames: (a: number) => [number, number];
export const schema_toJS: (a: number) => any;
export const schema_from_js_object: (a: any) => [number, number, number];
export const __wbg_strictforloop_free: (a: number, b: number) => void;
export const strictforloop_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const strictforloop_hasNext: (a: number) => number;
export const strictforloop_next: (a: number) => [number, number, number];
export const strictforloop_getIterationCount: (a: number) => number;
export const strictforloop_reset: (a: number) => void;
export const strictforloop_getCurrent: (a: number) => number;
export const strictforloop_getProgress: (a: number) => number;
export const strictforloop_getStep: (a: number) => number;
export const strictforloop_getEnd: (a: number) => number;
export const strictforloop_getHeapType: (a: number) => number;
export const __wbg_strictboolean_free: (a: number, b: number) => void;
export const strictboolean_new: (a: number) => number;
export const strictboolean_get: (a: number) => number;
export const strictboolean_set: (a: number, b: number) => void;
export const strictboolean_toggle: (a: number) => void;
export const strictboolean_and: (a: number, b: number) => number;
export const strictboolean_or: (a: number, b: number) => number;
export const strictboolean_not: (a: number) => number;
export const strictboolean_toString: (a: number) => [number, number];
export const __wbg_strictarray_free: (a: number, b: number) => void;
export const strictarray_new: (a: number, b: number) => number;
export const strictarray_len: (a: number) => number;
export const strictarray_heap: (a: number) => number;
export const strictarray_byte_len: (a: number) => number;
export const strictarray_as_ptr: (a: number) => number;
export const strictarray_get: (a: number, b: number) => [number, number, number];
export const strictarray_set: (a: number, b: number, c: number) => [number, number];
export const strictarray_map: (a: number, b: any) => [number, number, number];
export const strictarray_forEach: (a: number, b: any) => [number, number];
export const strictarray_reduce: (a: number, b: any, c: number) => [number, number, number];
export const strictarray_setRange: (a: number, b: number, c: number, d: number) => [number, number];
export const strictarray_getRange: (a: number, b: number, c: number) => [number, number, number, number];
export const strictarray_fill: (a: number, b: number) => [number, number];
export const __wbg_threadconfig_free: (a: number, b: number) => void;
export const __wbg_get_threadconfig_priority: (a: number) => number;
export const __wbg_set_threadconfig_priority: (a: number, b: number) => void;
export const __wbg_get_threadconfig_stack_size: (a: number) => number;
export const __wbg_set_threadconfig_stack_size: (a: number, b: number) => void;
export const __wbg_get_threadconfig_timeout_ms: (a: number) => number;
export const __wbg_set_threadconfig_timeout_ms: (a: number, b: number) => void;
export const __wbg_get_threadconfig_max_retries: (a: number) => number;
export const __wbg_set_threadconfig_max_retries: (a: number, b: number) => void;
export const init_thread_manager: (a: any) => [number, number, number];
export const get_memory: () => any;
export const strictarray_capacity: (a: number) => number;
export const strictarray_buffer: (a: number) => number;
export const __wbg_strictobject_free: (a: number, b: number) => void;
export const strictobject_new: (a: any) => [number, number, number];
export const strictobject_setField: (a: number, b: number, c: number, d: any) => [number, number];
export const strictobject_newWithData: (a: any, b: any) => [number, number, number];
export const strictobject_getField: (a: number, b: number, c: number) => [number, number, number];
export const strictobject_getFieldAsString: (a: number, b: number, c: number) => [number, number, number, number];
export const strictobject_getFieldAsNumber: (a: number, b: number, c: number) => [number, number, number];
export const strictobject_getFieldAsBoolean: (a: number, b: number, c: number) => [number, number, number];
export const strictobject_getNestedObject: (a: number, b: number, c: number) => [number, number, number];
export const strictobject_getSchema: (a: number) => any;
export const strictobject_toJS: (a: number) => any;
export const strictobject_fieldNames: (a: number) => [number, number];
export const strictobject_isNestedField: (a: number, b: number, c: number) => number;
export const __wbg_strictbigint_free: (a: number, b: number) => void;
export const strictbigint_new: (a: any, b: number) => [number, number, number];
export const strictbigint_get: (a: number) => any;
export const strictbigint_set: (a: number, b: any) => [number, number];
export const strictbigint_add: (a: number, b: any) => [number, number];
export const __wbg_strictwhileloop_free: (a: number, b: number) => void;
export const strictwhileloop_new: (a: any, b: number) => number;
export const strictwhileloop_shouldContinue: (a: number) => [number, number, number];
export const strictwhileloop_increment: (a: number) => [number, number, number];
export const strictwhileloop_getIterationCount: (a: number) => number;
export const strictwhileloop_reset: (a: number) => void;
export const strictwhileloop_run: (a: number, b: any) => [number, number, number];
export const __wbg_threadmanager_free: (a: number, b: number) => void;
export const threadmanager_new: (a: any) => [number, number, number];
export const threadmanager_createPool: (a: number, b: number, c: number, d: number) => number;
export const threadmanager_getPool: (a: number, b: number, c: number) => number;
export const threadmanager_submitToPool: (a: number, b: number, c: number, d: any, e: any, f: any, g: number) => [number, number, number, number];
export const threadmanager_executeBatch: (a: number, b: number, c: number, d: number) => any;
export const threadmanager_parallelMap: (a: number, b: any, c: any, d: any, e: number, f: number) => any;
export const __wbg_threadpool_free: (a: number, b: number) => void;
export const threadpool_new: (a: number) => number;
export const threadpool_submitTask: (a: number, b: number) => [number, number];
export const threadpool_submitFunction: (a: number, b: any, c: any, d: any, e: number) => [number, number, number, number];
export const threadpool_executeNext: (a: number) => any;
export const threadpool_getTaskStatus: (a: number, b: number, c: number) => any;
export const threadpool_cancelTask: (a: number, b: number, c: number) => number;
export const threadpool_getCompletedResult: (a: number, b: number, c: number) => any;
export const threadpool_active_count: (a: number) => number;
export const threadpool_pending_count: (a: number) => number;
export const threadpool_completed_count: (a: number) => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_export_3: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __externref_drop_slice: (a: number, b: number) => void;
export const _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h36f2658aa7b0e9c1: (a: number, b: number) => void;
export const closure71_externref_shim: (a: number, b: number, c: any) => void;
export const closure93_externref_shim: (a: number, b: number, c: any, d: any) => void;
export const __wbindgen_start: () => void;
